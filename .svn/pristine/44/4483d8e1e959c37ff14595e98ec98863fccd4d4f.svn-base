package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.sql.DataSource;

import dto.Donation;
import dto.Exchange;

public class GiveDao {
	
	DataSource dataSource;
	public GiveDao(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	
	
	// 기부 목록 - 전체
	public ArrayList<Donation> donationList() {
		ArrayList<Donation> donationList = new ArrayList<Donation>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from donation";
		try {
			conn = dataSource.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Donation donation = new Donation();
				donation.setNo(rs.getInt("no"));
				donation.setCategory(rs.getString("category"));
				donation.setTalent1(rs.getString("talent1"));
				donation.setTalent2(rs.getString("talent2"));
				donation.setPeople(rs.getInt("people"));
				donation.setId(rs.getString("id"));
				donation.setSubject(rs.getString("subject"));
				donation.setContent(rs.getString("content"));
				donation.setLocation(rs.getString("location"));
				donation.setClosing_date(rs.getString("closing_date"));
				donationList.add(donation);
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch(Exception e) {}
		}
		return donationList;
	}
	
	// 기부 목록 - 카테고리 별
	public ArrayList<Donation> donationCategoryList(String category) {
		ArrayList<Donation> donationCategoryList = new ArrayList<Donation>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from donation where category=?";
		try {
			conn = dataSource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, category);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Donation donationCategory = new Donation();
				donationCategory.setNo(rs.getInt("no"));
				donationCategory.setCategory(rs.getString("category"));
				donationCategory.setTalent1(rs.getString("talent1"));
				donationCategory.setTalent2(rs.getString("talent2"));
				donationCategory.setPeople(rs.getInt("people"));
				donationCategory.setId(rs.getString("id"));
				donationCategory.setSubject(rs.getString("subject"));
				donationCategory.setContent(rs.getString("content"));
				donationCategory.setLocation(rs.getString("location"));
				donationCategory.setClosing_date(rs.getString("closing_date"));
				donationCategoryList.add(donationCategory);
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch(Exception e) {}
		}
		return donationCategoryList;
	}
	
	// 새 기부 클래스 등록
	public int regDonationClass(Donation donation) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "insert into donation(category, talent1, talent2, people, id, subject, content, location, closing_date) values ((select category from category where talent=?),?,?,?,?,?,?,?,?)";
		int result = 0;
		try {
			conn = dataSource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, donation.getTalent1());
			pstmt.setString(2, donation.getTalent1());
			pstmt.setString(3, donation.getTalent2());
			pstmt.setInt(4, donation.getPeople());
			pstmt.setString(5, donation.getId());
			pstmt.setString(6, donation.getSubject());
			pstmt.setString(7, donation.getContent());
			pstmt.setString(8, donation.getLocation());
			pstmt.setString(9, donation.getClosing_date());
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch(Exception e) {}
		}
		return result;
	}
	
	// 기부 상세
	public Donation donationDetail(int no) {
		Donation donationDetail = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from donation where no=?";
		try {
			conn = dataSource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, no);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				donationDetail = new Donation();
				donationDetail.setNo(rs.getInt("no"));
				donationDetail.setCategory(rs.getString("category"));
				donationDetail.setTalent1(rs.getString("talent1"));
				donationDetail.setTalent2(rs.getString("talent2"));
				donationDetail.setPeople(rs.getInt("people"));
				donationDetail.setId(rs.getString("id"));
				donationDetail.setSubject(rs.getString("subject"));
				donationDetail.setContent(rs.getString("content"));
				donationDetail.setLocation(rs.getString("location"));
				donationDetail.setClosing_date(rs.getString("closing_date"));
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch(Exception e) {}
		}
		return donationDetail;
	}
	
	
	
	// 교환 목록 - 전체
	public ArrayList<Exchange> exchangeList() {
		ArrayList<Exchange> exchangeList = new ArrayList<Exchange>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from exchange";
		try {
			conn = dataSource.getConnection();
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Exchange exchange = new Exchange();
				exchange.setNo(rs.getInt("no"));
				exchange.setGive_category(rs.getString("give_category"));
				exchange.setGive_talent1(rs.getString("give_talent1"));
				exchange.setGive_talent2(rs.getString("give_talent2"));
				exchange.setWish_category(rs.getString("wish_category"));
				exchange.setWish_talent1(rs.getString("wish_talent1"));
				exchange.setWish_talent2(rs.getString("wish_talent2"));
				exchange.setId(rs.getString("id"));
				exchange.setSubject(rs.getString("subject"));
				exchange.setContent(rs.getString("content"));
				exchange.setLocation(rs.getString("location"));
				exchange.setClosing_date(rs.getString("closing_date"));
				exchangeList.add(exchange);
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch(Exception e) {}
		}
		return exchangeList;
	}
	
	// 교환 목록 - 카테고리 별
	public ArrayList<Exchange> exchangeCategoryList(String category) {
		ArrayList<Exchange> exchangeCategoryList = new ArrayList<Exchange>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from exchange where give_category=?, wish_category=?";
		try {
			conn = dataSource.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, category);
			pstmt.setString(2, category);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				Exchange exchangeCategory = new Exchange();
				exchangeCategory.setNo(rs.getInt("no"));
				exchangeCategory.setGive_category(rs.getString("give_category"));
				exchangeCategory.setGive_talent1(rs.getString("give_talent1"));
				exchangeCategory.setGive_talent2(rs.getString("give_talent2"));
				exchangeCategory.setWish_category(rs.getString("wish_category"));
				exchangeCategory.setWish_talent1(rs.getString("wish_talent1"));
				exchangeCategory.setWish_talent2(rs.getString("wish_talent2"));
				exchangeCategory.setId(rs.getString("id"));
				exchangeCategory.setSubject(rs.getString("subject"));
				exchangeCategory.setContent(rs.getString("content"));
				exchangeCategory.setLocation(rs.getString("location"));
				exchangeCategory.setClosing_date(rs.getString("closing_date"));
				exchangeCategoryList.add(exchangeCategory);
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch(Exception e) {}
		}
		return exchangeCategoryList;
	}
	
	// 새 교환 클래스 등록
		public int regExchangeClass(Exchange exchange) {
			Connection conn = null;
			PreparedStatement pstmt = null;
			String sql = "insert into exchange(give_category, give_talent1, give_talent2, wish_category, wish_talent1, wish_talent2, id, subject, content, location, closing_date) values ((select category from category where talent=?),?,?,(select category from category where talent=?),?,?,?,?,?,?,?)";
			int result = 0;
			try {
				conn = dataSource.getConnection();
				pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, exchange.getGive_category());
				pstmt.setString(2, exchange.getGive_talent1());
				pstmt.setString(3, exchange.getGive_talent2());
				pstmt.setString(4, exchange.getWish_category());
				pstmt.setString(5, exchange.getWish_talent1());
				pstmt.setString(6, exchange.getWish_talent2());
				pstmt.setString(7, exchange.getId());
				pstmt.setString(8, exchange.getSubject());
				pstmt.setString(9, exchange.getContent());
				pstmt.setString(10, exchange.getLocation());
				pstmt.setString(11, exchange.getClosing_date());
				result = pstmt.executeUpdate();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (pstmt != null) pstmt.close();
					if (conn != null) conn.close();
				} catch(Exception e) {}
			}
			return result;
		}
	
	
	
	
}

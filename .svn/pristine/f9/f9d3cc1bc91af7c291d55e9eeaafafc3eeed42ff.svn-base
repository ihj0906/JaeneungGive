package controller;

import java.util.ArrayList;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import dto.Donation;
import dto.Exchange;
import dto.LoginInfo;
import service.BookmarkService;
import service.GiveService;

@Controller
public class GiveController {
	
	@Autowired
	private GiveService giveSvc;
	
	@Autowired
	private BookmarkService bookmarkSvc;
	
	/*// 기부 목록 - 전체
	@RequestMapping("/give/donation")
	public String donationList(Model model) {
		ArrayList<Donation> donationList = giveSvc.donationList();
		model.addAttribute("donationList", donationList);
		return "give/donation";
	}
	
	// 기부 목록 - 카테고리 별
	@RequestMapping("/give/donation&{category}")
	public String donationCategoryList(@PathVariable("category") String category, Model model) {
		ArrayList<Donation> donationCategoryList = giveSvc.donationCategoryList(category);
		model.addAttribute("category", category);
		model.addAttribute("donationCategoryList", donationCategoryList);
		return "give/donation";
	}*/
	
	// index 검색기능 - 기부
	@RequestMapping(value="/give/search_give_donation", method={RequestMethod.GET, RequestMethod.POST})
	public String searchGive_donation(
			@RequestParam(value="category", required=false) String searchOption,
			@RequestParam(value="key",  required=false) String keyword, Model model) throws Exception {
		if (searchOption.equals("기부") || searchOption == "") {
			ArrayList<Donation> donationList = giveSvc.donationList(keyword);
			model.addAttribute("donationList", donationList);
			model.addAttribute("keyword", keyword);
		}
		return "give/donation";
	}
	
	// index 검색기능 - 교환
	@RequestMapping(value="/give/search_give_exchange", method={RequestMethod.GET, RequestMethod.POST})
	public String searchGive_exchange(
			@RequestParam(value="category") String searchOption,
			@RequestParam(value="key") String keyword, Model model) throws Exception {
		if (searchOption.equals("교환") || searchOption == "") {
			ArrayList<Exchange> exchangeList = giveSvc.exchangeList(keyword);
			model.addAttribute("exchangeList", exchangeList);
			model.addAttribute("keyword", keyword);
		}
//			레코드의 갯수
//			int count = giveSvc.countArticle(searchOption, keyword);
//			ModelAndView 모델과 뷰
		/*Map<String, Object> map = new HashMap<String, Object>();
		map.put("list", list); // list
		map.put("count", count); // 레코드의 갯수
		map.put("searchOption", searchOption); // 검색옵션
		map.put("keyword", keyword); // 검색키워드
		mav.addObject("map",map); // 맵에 저장된 데이터를 mav에 저장
		mav.setViewName("donation/list"); // list.jsp로 list가 전달된다.*/		
	return "give/exchange";
	}
	
	
	// 새 기부 클래스 등록 양식
	@RequestMapping("/give/donationWriteForm")
	public String donationWriteForm() {
		return "give/donationWriteForm";
	}
	
	// 새 기부 클래스 등록 양식
	@RequestMapping("/give/exchangeWriteForm")
	public String exchangeWriteForm() {
		return "give/exchangeWriteForm";
	}
	
	// 새 기부 클래스 등록
	@RequestMapping(value="/regDonationClass", method=RequestMethod.POST)
	public String regDonationClass(Donation donation) {
		giveSvc.regDonationClass(donation);
		return "redirect:/give/search_give_donation";
	}
	
	// 새 교환 클래스 등록
	@RequestMapping(value="/regExchangeClass", method=RequestMethod.POST)
	public String regExchangeClass(Exchange exchange) {
		giveSvc.regExchangeClass(exchange);
		return "redirect:/give/search_give_exchange";
	}
	
	
	/**
	 * 기부 상세 페이지 
	 * @param no 게시물 번호 
	 * @return
	 */
	@RequestMapping("/give/donationDetail&{no}")
	public String donationDetail(@PathVariable("no") int no, Model model,HttpSession session) {
		// 로그인 한 사용자일 경우 북마크 정보를 가져와서 보여준다.
		LoginInfo loginInfo = (LoginInfo)session.getAttribute("loginInfo");
		if(loginInfo != null ) {
			model.addAttribute("bookmark", bookmarkSvc.checkbookmark(loginInfo.getId(), no, 1));
		}
		Donation donationDetail = giveSvc.donationDetail(no);
		model.addAttribute("donationDetail", donationDetail);
		return "give/donationDetail";
	}
	
	
	
	
	
}

package controller;

import java.util.ArrayList;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;

import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.bind.annotation.RequestParam;

import dto.Applicant;

import dto.Donation;

import dto.Exchange;

import dto.LoginInfo;

import service.ApplicantService;

import service.BookmarkService;

import service.GiveService;

@Controller

public class GiveController {

	@Autowired

	private GiveService giveSvc;

	@Autowired

	private ApplicantService applicantSvc;

	@Autowired

	private BookmarkService bookmarkSvc;

	/*
	 * 
	 * // 기부 목록 - 전체
	 * 
	 * 
	 * 
	 * @RequestMapping("/give/donation") public String donationList(Model model) {
	 * 
	 * ArrayList<Donation> donationList = giveSvc.donationList();
	 * 
	 * model.addAttribute("donationList", donationList); return "give/donation"; }
	 * 
	 * 
	 * 
	 * // 기부 목록 - 카테고리 별
	 * 
	 * 
	 * 
	 * @RequestMapping("/give/donation&{category}") public String
	 * 
	 * donationCategoryList(@PathVariable("category") String category, Model model)
	 * 
	 * { ArrayList<Donation> donationCategoryList =
	 * 
	 * giveSvc.donationCategoryList(category); model.addAttribute("category",
	 * 
	 * category); model.addAttribute("donationCategoryList", donationCategoryList);
	 * 
	 * return "give/donation"; }
	 * 
	 */

	// index 검색기능 - 기부

	@RequestMapping(value = "/give/search_give_donation", method = { RequestMethod.GET, RequestMethod.POST })

	public String searchGive_donation(@RequestParam(value = "category", required = false) String searchOption,

			@RequestParam(value = "key", required = false) String keyword, Model model, HttpSession session)

			throws Exception {

		// 로그인 한 사용자일 경우 북마크 정보를 가져와서 보여준다.

		LoginInfo loginInfo = (LoginInfo) session.getAttribute("loginInfo");

		String id = "";

		if (loginInfo != null) {

			id = loginInfo.getId();

		}

		if (searchOption == null) {

			keyword = "";

			ArrayList<Donation> donationList = giveSvc.donationList(keyword, id);

			model.addAttribute("donationList", donationList);

			model.addAttribute("keyword", keyword);

		} else if (searchOption.equals("기부")) {

			ArrayList<Donation> donationList = giveSvc.donationList(keyword, id);

			model.addAttribute("donationList", donationList);

			model.addAttribute("keyword", keyword);

		}

		return "give/donation";

	}

	// index 검색기능 - 교환

	@RequestMapping(value = "/give/search_give_exchange", method = { RequestMethod.GET, RequestMethod.POST })

	public String searchGive_exchange(@RequestParam(value = "category", required = false) String searchOption,

			@RequestParam(value = "key", required = false) String keyword, Model model, HttpSession session)

			throws Exception {

		LoginInfo loginInfo = (LoginInfo) session.getAttribute("loginInfo");

		String id = "";

		if (loginInfo != null) {

			id = loginInfo.getId();

		}

		if (searchOption == null) {

			keyword = "";

			ArrayList<Exchange> exchangeList = giveSvc.exchangeList(keyword, id);

			model.addAttribute("exchangeList", exchangeList);

			model.addAttribute("keyword", keyword);

		} else if (searchOption.equals("교환")) {

			ArrayList<Exchange> exchangeList = giveSvc.exchangeList(keyword, id);

			model.addAttribute("exchangeList", exchangeList);

			model.addAttribute("keyword", keyword);

		}

		return "give/exchange";

	}

	// 새 게시글 등록&수정 (폼으로)

	@RequestMapping(value = "/give/writeForm&{board}&{no}", method = { RequestMethod.GET, RequestMethod.POST })

	public String donationWriteForm(@PathVariable("board") String board, @PathVariable("no") int no, Model model) {

		if (board.equals("donation")) {

			// 수정 폼으로

			if (no != 0) {

				Donation modDonation = giveSvc.donationDetail(no);

				model.addAttribute("modDonation", modDonation);

				return "give/donationWriteForm";

			}

			// 등록 폼으로

			return "give/donationWriteForm";

		} else {

			// 수정 폼으로

			if (no != 0) {

				Exchange modExchange = giveSvc.exchangeDetail(no);

				model.addAttribute("modExchange", modExchange);

				return "give/exchangeWriteForm";

			}

			// 등록 폼으로

			return "give/exchangeWriteForm";

		}

	}

	// 새 게시글 등록 완료

	@RequestMapping(value = "/regClass&{board}", method = { RequestMethod.GET, RequestMethod.POST })

	public String regDonationClass(@PathVariable("board") String board, Donation donation, Exchange exchange) {

		if (board.equals("donation")) {

			giveSvc.regDonationClass(donation);

			return "redirect:/give/search_give_donation";

		} else {

			giveSvc.regExchangeClass(exchange);

			return "redirect:/give/search_give_exchange";

		}

	}

	// 해당 게시글 수정 완료

	@RequestMapping(value = "/modClass&{board}", method = { RequestMethod.GET, RequestMethod.POST })

	public String modDonationClass(@PathVariable("board") String board, Donation donation, Exchange exchange) {

		if (board.equals("donation")) {

			giveSvc.modDonationClass(donation);

			return "redirect:/give/search_give_donation";

		} else {

			giveSvc.modExchangeClass(exchange);

			return "redirect:/give/search_give_exchange";

		}

	}

	// 해당 게시글 삭제

	@RequestMapping("/give/delClass&{board}&{no}")

	public String deleteClass(@PathVariable("board") String board, @PathVariable("no") int no) {

		if (board.equals("donation")) {

			giveSvc.delDonationClass(no);

			return "redirect:/give/search_give_donation";

		} else {

			giveSvc.delExchangeClass(no);

			return "redirect:/give/search_give_exchange";

		}

	}

	/**
	 * 
	 * 기부 상세 페이지
	 * 
	 * 
	 * 
	 * @param no 게시물 번호
	 * 
	 * @return
	 * 
	 */

	@RequestMapping("/give/donationDetail&{no}")

	public String donationDetail(@PathVariable("no") int no, Model model, HttpSession session) {

		// 로그인 한 사용자일 경우 북마크 정보를 가져와서 보여준다.

		LoginInfo loginInfo = (LoginInfo) session.getAttribute("loginInfo");

		String id = "";

		if (loginInfo != null) {

			id = loginInfo.getId();

//			model.addAttribute("bookmark", bookmarkSvc.checkbookmark(loginInfo.getId(), no, 1));

		}

		Donation donationDetail = giveSvc.donationDetail(no, id);

		model.addAttribute("donationDetail", donationDetail);

		return "give/donationDetail";

	}

	// 교환 상세

	@RequestMapping("/give/exchangeDetail&{no}")

	public String exchangeDetail(@PathVariable("no") int no, Model model, HttpSession session) {

		// 로그인 한 사용자일 경우 북마크 정보를 가져와서 보여준다.

		LoginInfo loginInfo = (LoginInfo) session.getAttribute("loginInfo");

		String id = "";

		if (loginInfo != null) {

			id = loginInfo.getId();

//			model.addAttribute("bookmark", bookmarkSvc.checkbookmark(loginInfo.getId(), no, 2));

		}

		ArrayList<Applicant> listOfApplicant = applicantSvc.listOfApplicant(no, 2);

		Exchange exchangeDetail = giveSvc.exchangeDetail(no, id);

		model.addAttribute("exchangeDetail", exchangeDetail);

		model.addAttribute("listOfApplicant", listOfApplicant);

		model.addAttribute("applicant", applicantSvc.applicant(no, 2, id));

		return "give/exchangeDetail";

	}

}